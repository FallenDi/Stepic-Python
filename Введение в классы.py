#Реализуйте класс MoneyBox, для работы с виртуальной копилкой.
#Каждая копилка имеет ограниченную вместимость, которая выражается целым числом – количеством монет,
#которые можно положить в копилку. Класс должен поддерживать информацию о количестве монет в копилке,
#предоставлять возможность добавлять монеты в копилку и узнавать,
#можно ли добавить в копилку ещё какое-то количество монет, не превышая ее вместимость.
class MoneyBox:
    def __init__(self, capacity):
        self.money = 0
        self.capacity = capacity
        
    def can_add(self, v):
        if self.money + v <= self.capacity:
            return True
        else:
            return False
        
    def add(self, v):
        if self.can_add(v) == True:
            self.money += v
            return self.money 
        else:
            return self.money

#x = MoneyBox(15)
#x.add(5)
#x.add(9)
#x.add(3)

#Вам дается последовательность целых чисел и вам нужно ее обработать и вывести на экран
#сумму первой пятерки чисел из этой последовательности, затем сумму второй пятерки, и т. д.
#Но последовательность не дается вам сразу целиком. С течением времени к вам поступают
#её последовательные части. Например, сначала первые три элемента, потом следующие шесть,
#потом следующие два и т. д.
#Реализуйте класс Buffer, который будет накапливать в себе элементы последовательности
#и выводить сумму пятерок последовательных элементов по мере их накопления.
#Одним из требований к классу является то, что он не должен хранить в себе больше элементов,
#чем ему действительно необходимо, т. е. он не должен хранить элементы, которые уже вошли в пятерку,
#для которой была выведена сумма.

class Buffer:
    def __init__(self):
        self.values = []

    def add(self, *a):
        self.values += a
        while len(self.values) - 5 >=0:
            print(sum(self.values[0:5]))
            self.values = self.values[5:]
    def get_current_part(self):
        return self.values
        
            
        
#buf = Buffer()
#buf.add(1, 2, 3)
#buf.get_current_part() # вернуть [1, 2, 3]
#buf.add(4, 5, 6) # print(15) – вывод суммы первой пятерки элементов
#print(buf.get_current_part()) # вернуть [6]
#buf.add(7, 8, 9, 10) # print(40) – вывод суммы второй пятерки элементов
#print(buf.get_current_part()) # вернуть []
#buf.add(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1) # print(5), print(5) – вывод сумм третьей и четвертой пятерки
#print(buf.get_current_part()) # вернуть [1]